// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TAST_Store.Models;

#nullable disable

namespace TAST_Store.Migrations
{
    [DbContext(typeof(TAST_STOREContext))]
    partial class TAST_STOREContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Blog", b =>
                {
                    b.Property<int>("IdBlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_BLOG");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBlog"), 1L, 1);

                    b.Property<DateTime?>("Datebegin")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("DATEBEGIN");

                    b.Property<string>("Detail")
                        .HasColumnType("ntext")
                        .HasColumnName("DETAIL");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<int?>("IdUsers")
                        .HasColumnType("int")
                        .HasColumnName("ID_USERS");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("IdBlog")
                        .HasName("PK__BLOG__75519326BD7DB911");

                    b.HasIndex("IdUsers");

                    b.ToTable("BLOG", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Cart", b =>
                {
                    b.Property<int>("IdCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CART");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCart"), 1L, 1);

                    b.Property<DateTime?>("Datebegin")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("DATEBEGIN");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<int?>("IdUsers")
                        .HasColumnType("int")
                        .HasColumnName("ID_USERS");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.HasKey("IdCart")
                        .HasName("PK__CART__7A1680A5A1B60353");

                    b.HasIndex("IdUsers");

                    b.ToTable("CART", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.CartDetail", b =>
                {
                    b.Property<int>("IdCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCd"), 1L, 1);

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<int?>("IdCart")
                        .HasColumnType("int")
                        .HasColumnName("ID_CART");

                    b.Property<int?>("IdPro")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRO");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<int?>("SoldNum")
                        .HasColumnType("int")
                        .HasColumnName("SOLD_NUM");

                    b.HasKey("IdCd")
                        .HasName("PK__CART_DET__8B622F8FF8FA1C85");

                    b.HasIndex("IdCart");

                    b.HasIndex("IdPro");

                    b.ToTable("CART_DETAIL", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Catology", b =>
                {
                    b.Property<int>("IdCat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCat"), 1L, 1);

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<string>("NameCat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME_CAT");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.HasKey("IdCat")
                        .HasName("PK__CATOLOGY__2BF8FA1CBA9A2E5B");

                    b.ToTable("CATOLOGY", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Menu", b =>
                {
                    b.Property<int>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MENU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenu"), 1L, 1);

                    b.Property<DateTime?>("Datebegin")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("DATEBEGIN");

                    b.Property<int>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("IdMenu")
                        .HasName("PK__MENU__4728FC60DE9BA532");

                    b.ToTable("MENU", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Permission", b =>
                {
                    b.Property<int>("IdPermission")
                        .HasColumnType("int")
                        .HasColumnName("ID_PERMISSION");

                    b.Property<string>("Permission1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PERMISSION");

                    b.HasKey("IdPermission");

                    b.ToTable("PERMISSIONS", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Product", b =>
                {
                    b.Property<int>("IdPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PRO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPro"), 1L, 1);

                    b.Property<string>("Detail")
                        .HasColumnType("ntext")
                        .HasColumnName("DETAIL");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<int?>("IdCat")
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT");

                    b.Property<string>("Img1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG1");

                    b.Property<string>("Img2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG2");

                    b.Property<string>("Img3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG3");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<string>("NamePro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME_PRO");

                    b.Property<int?>("Nums")
                        .HasColumnType("int")
                        .HasColumnName("NUMS");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRICE");

                    b.Property<decimal?>("Sale")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SALE");

                    b.HasKey("IdPro")
                        .HasName("PK__PRODUCTS__20AF98FD4A428510");

                    b.HasIndex("IdCat");

                    b.ToTable("PRODUCTS", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.Slider", b =>
                {
                    b.Property<int>("IdSlide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_SLIDE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSlide"), 1L, 1);

                    b.Property<DateTime?>("Datebegin")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("DATEBEGIN");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("IdSlide")
                        .HasName("PK__SLIDER__22D1BB105547F98F");

                    b.ToTable("SLIDER", (string)null);
                });

            modelBuilder.Entity("TAST_Store.Models.User", b =>
                {
                    b.Property<int>("IdUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USERS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsers"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("Hide")
                        .HasColumnType("int")
                        .HasColumnName("HIDE");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINK");

                    b.Property<string>("Meta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("META");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<int?>("Permission")
                        .HasColumnType("int")
                        .HasColumnName("PERMISSION");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("USERNAME");

                    b.HasKey("IdUsers")
                        .HasName("PK__USERS__1DDB35C39D9574E9");

                    b.HasIndex("Permission");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TAST_Store.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TAST_Store.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TAST_Store.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TAST_Store.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TAST_Store.Models.Blog", b =>
                {
                    b.HasOne("TAST_Store.Models.User", "IdUsersNavigation")
                        .WithMany("Blogs")
                        .HasForeignKey("IdUsers")
                        .HasConstraintName("FK__BLOG__ID_USERS__31EC6D26");

                    b.Navigation("IdUsersNavigation");
                });

            modelBuilder.Entity("TAST_Store.Models.Cart", b =>
                {
                    b.HasOne("TAST_Store.Models.User", "IdUsersNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("IdUsers")
                        .HasConstraintName("FK__CART__ID_USERS__32E0915F");

                    b.Navigation("IdUsersNavigation");
                });

            modelBuilder.Entity("TAST_Store.Models.CartDetail", b =>
                {
                    b.HasOne("TAST_Store.Models.Cart", "IdCartNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("IdCart")
                        .HasConstraintName("FK__CART_DETA__ID_CA__35BCFE0A");

                    b.HasOne("TAST_Store.Models.Product", "IdProNavigation")
                        .WithMany("CartDetails")
                        .HasForeignKey("IdPro")
                        .HasConstraintName("FK__CART_DETA__ID_PR__33D4B598");

                    b.Navigation("IdCartNavigation");

                    b.Navigation("IdProNavigation");
                });

            modelBuilder.Entity("TAST_Store.Models.Product", b =>
                {
                    b.HasOne("TAST_Store.Models.Catology", "IdCatNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCat")
                        .HasConstraintName("FK__PRODUCTS__ID_CAT__34C8D9D1");

                    b.Navigation("IdCatNavigation");
                });

            modelBuilder.Entity("TAST_Store.Models.User", b =>
                {
                    b.HasOne("TAST_Store.Models.Permission", "PermissionNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Permission")
                        .HasConstraintName("FK_USERS_PERMISSIONS");

                    b.Navigation("PermissionNavigation");
                });

            modelBuilder.Entity("TAST_Store.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("TAST_Store.Models.Catology", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TAST_Store.Models.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TAST_Store.Models.Product", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("TAST_Store.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
